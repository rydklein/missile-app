
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Object
 * 
 */
export type Object = $Result.DefaultSelection<Prisma.$ObjectPayload>
/**
 * Model ObjectRange
 * 
 */
export type ObjectRange = $Result.DefaultSelection<Prisma.$ObjectRangePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.object`: Exposes CRUD operations for the **Object** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Objects
    * const objects = await prisma.object.findMany()
    * ```
    */
  get object(): Prisma.ObjectDelegate<ExtArgs>;

  /**
   * `prisma.objectRange`: Exposes CRUD operations for the **ObjectRange** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ObjectRanges
    * const objectRanges = await prisma.objectRange.findMany()
    * ```
    */
  get objectRange(): Prisma.ObjectRangeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Object: 'Object',
    ObjectRange: 'ObjectRange'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "object" | "objectRange"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Object: {
        payload: Prisma.$ObjectPayload<ExtArgs>
        fields: Prisma.ObjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ObjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ObjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload>
          }
          findFirst: {
            args: Prisma.ObjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ObjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload>
          }
          findMany: {
            args: Prisma.ObjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload>[]
          }
          create: {
            args: Prisma.ObjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload>
          }
          createMany: {
            args: Prisma.ObjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ObjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload>[]
          }
          delete: {
            args: Prisma.ObjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload>
          }
          update: {
            args: Prisma.ObjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload>
          }
          deleteMany: {
            args: Prisma.ObjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ObjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ObjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectPayload>
          }
          aggregate: {
            args: Prisma.ObjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateObject>
          }
          groupBy: {
            args: Prisma.ObjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ObjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ObjectCountArgs<ExtArgs>
            result: $Utils.Optional<ObjectCountAggregateOutputType> | number
          }
        }
      }
      ObjectRange: {
        payload: Prisma.$ObjectRangePayload<ExtArgs>
        fields: Prisma.ObjectRangeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ObjectRangeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ObjectRangeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload>
          }
          findFirst: {
            args: Prisma.ObjectRangeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ObjectRangeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload>
          }
          findMany: {
            args: Prisma.ObjectRangeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload>[]
          }
          create: {
            args: Prisma.ObjectRangeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload>
          }
          createMany: {
            args: Prisma.ObjectRangeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ObjectRangeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload>[]
          }
          delete: {
            args: Prisma.ObjectRangeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload>
          }
          update: {
            args: Prisma.ObjectRangeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload>
          }
          deleteMany: {
            args: Prisma.ObjectRangeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ObjectRangeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ObjectRangeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ObjectRangePayload>
          }
          aggregate: {
            args: Prisma.ObjectRangeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateObjectRange>
          }
          groupBy: {
            args: Prisma.ObjectRangeGroupByArgs<ExtArgs>
            result: $Utils.Optional<ObjectRangeGroupByOutputType>[]
          }
          count: {
            args: Prisma.ObjectRangeCountArgs<ExtArgs>
            result: $Utils.Optional<ObjectRangeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    ownedObjects: number
    objectRanges: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedObjects?: boolean | UserCountOutputTypeCountOwnedObjectsArgs
    objectRanges?: boolean | UserCountOutputTypeCountObjectRangesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountObjectRangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObjectRangeWhereInput
  }


  /**
   * Count Type ObjectCountOutputType
   */

  export type ObjectCountOutputType = {
    objectRanges: number
  }

  export type ObjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    objectRanges?: boolean | ObjectCountOutputTypeCountObjectRangesArgs
  }

  // Custom InputTypes
  /**
   * ObjectCountOutputType without action
   */
  export type ObjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectCountOutputType
     */
    select?: ObjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ObjectCountOutputType without action
   */
  export type ObjectCountOutputTypeCountObjectRangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObjectRangeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    health: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    health: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    device_identifier: string | null
    device_token: string | null
    name: string | null
    health: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    device_identifier: string | null
    device_token: string | null
    name: string | null
    health: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    device_identifier: number
    device_token: number
    name: number
    health: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    health?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    health?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    device_identifier?: true
    device_token?: true
    name?: true
    health?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    device_identifier?: true
    device_token?: true
    name?: true
    health?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    device_identifier?: true
    device_token?: true
    name?: true
    health?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    device_identifier: string
    device_token: string
    name: string | null
    health: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    device_identifier?: boolean
    device_token?: boolean
    name?: boolean
    health?: boolean
    ownedObjects?: boolean | User$ownedObjectsArgs<ExtArgs>
    objectRanges?: boolean | User$objectRangesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    device_identifier?: boolean
    device_token?: boolean
    name?: boolean
    health?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    device_identifier?: boolean
    device_token?: boolean
    name?: boolean
    health?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ownedObjects?: boolean | User$ownedObjectsArgs<ExtArgs>
    objectRanges?: boolean | User$objectRangesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      ownedObjects: Prisma.$ObjectPayload<ExtArgs>[]
      objectRanges: Prisma.$ObjectRangePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      device_identifier: string
      device_token: string
      name: string | null
      health: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ownedObjects<T extends User$ownedObjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedObjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "findMany"> | Null>
    objectRanges<T extends User$objectRangesArgs<ExtArgs> = {}>(args?: Subset<T, User$objectRangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly device_identifier: FieldRef<"User", 'String'>
    readonly device_token: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly health: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.ownedObjects
   */
  export type User$ownedObjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    where?: ObjectWhereInput
    orderBy?: ObjectOrderByWithRelationInput | ObjectOrderByWithRelationInput[]
    cursor?: ObjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObjectScalarFieldEnum | ObjectScalarFieldEnum[]
  }

  /**
   * User.objectRanges
   */
  export type User$objectRangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    where?: ObjectRangeWhereInput
    orderBy?: ObjectRangeOrderByWithRelationInput | ObjectRangeOrderByWithRelationInput[]
    cursor?: ObjectRangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObjectRangeScalarFieldEnum | ObjectRangeScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Object
   */

  export type AggregateObject = {
    _count: ObjectCountAggregateOutputType | null
    _avg: ObjectAvgAggregateOutputType | null
    _sum: ObjectSumAggregateOutputType | null
    _min: ObjectMinAggregateOutputType | null
    _max: ObjectMaxAggregateOutputType | null
  }

  export type ObjectAvgAggregateOutputType = {
    id: number | null
    lat: number | null
    long: number | null
    ownerId: number | null
  }

  export type ObjectSumAggregateOutputType = {
    id: number | null
    lat: number | null
    long: number | null
    ownerId: number | null
  }

  export type ObjectMinAggregateOutputType = {
    id: number | null
    lat: number | null
    long: number | null
    type: string | null
    launched: boolean | null
    inFlight: boolean | null
    ownerId: number | null
  }

  export type ObjectMaxAggregateOutputType = {
    id: number | null
    lat: number | null
    long: number | null
    type: string | null
    launched: boolean | null
    inFlight: boolean | null
    ownerId: number | null
  }

  export type ObjectCountAggregateOutputType = {
    id: number
    lat: number
    long: number
    type: number
    launched: number
    inFlight: number
    ownerId: number
    _all: number
  }


  export type ObjectAvgAggregateInputType = {
    id?: true
    lat?: true
    long?: true
    ownerId?: true
  }

  export type ObjectSumAggregateInputType = {
    id?: true
    lat?: true
    long?: true
    ownerId?: true
  }

  export type ObjectMinAggregateInputType = {
    id?: true
    lat?: true
    long?: true
    type?: true
    launched?: true
    inFlight?: true
    ownerId?: true
  }

  export type ObjectMaxAggregateInputType = {
    id?: true
    lat?: true
    long?: true
    type?: true
    launched?: true
    inFlight?: true
    ownerId?: true
  }

  export type ObjectCountAggregateInputType = {
    id?: true
    lat?: true
    long?: true
    type?: true
    launched?: true
    inFlight?: true
    ownerId?: true
    _all?: true
  }

  export type ObjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Object to aggregate.
     */
    where?: ObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objects to fetch.
     */
    orderBy?: ObjectOrderByWithRelationInput | ObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Objects
    **/
    _count?: true | ObjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ObjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ObjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ObjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ObjectMaxAggregateInputType
  }

  export type GetObjectAggregateType<T extends ObjectAggregateArgs> = {
        [P in keyof T & keyof AggregateObject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObject[P]>
      : GetScalarType<T[P], AggregateObject[P]>
  }




  export type ObjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObjectWhereInput
    orderBy?: ObjectOrderByWithAggregationInput | ObjectOrderByWithAggregationInput[]
    by: ObjectScalarFieldEnum[] | ObjectScalarFieldEnum
    having?: ObjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ObjectCountAggregateInputType | true
    _avg?: ObjectAvgAggregateInputType
    _sum?: ObjectSumAggregateInputType
    _min?: ObjectMinAggregateInputType
    _max?: ObjectMaxAggregateInputType
  }

  export type ObjectGroupByOutputType = {
    id: number
    lat: number
    long: number
    type: string
    launched: boolean
    inFlight: boolean
    ownerId: number
    _count: ObjectCountAggregateOutputType | null
    _avg: ObjectAvgAggregateOutputType | null
    _sum: ObjectSumAggregateOutputType | null
    _min: ObjectMinAggregateOutputType | null
    _max: ObjectMaxAggregateOutputType | null
  }

  type GetObjectGroupByPayload<T extends ObjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ObjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ObjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ObjectGroupByOutputType[P]>
            : GetScalarType<T[P], ObjectGroupByOutputType[P]>
        }
      >
    >


  export type ObjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lat?: boolean
    long?: boolean
    type?: boolean
    launched?: boolean
    inFlight?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    objectRanges?: boolean | Object$objectRangesArgs<ExtArgs>
    _count?: boolean | ObjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["object"]>

  export type ObjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    lat?: boolean
    long?: boolean
    type?: boolean
    launched?: boolean
    inFlight?: boolean
    ownerId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["object"]>

  export type ObjectSelectScalar = {
    id?: boolean
    lat?: boolean
    long?: boolean
    type?: boolean
    launched?: boolean
    inFlight?: boolean
    ownerId?: boolean
  }

  export type ObjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    objectRanges?: boolean | Object$objectRangesArgs<ExtArgs>
    _count?: boolean | ObjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ObjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ObjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Object"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      objectRanges: Prisma.$ObjectRangePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      lat: number
      long: number
      type: string
      launched: boolean
      inFlight: boolean
      ownerId: number
    }, ExtArgs["result"]["object"]>
    composites: {}
  }

  type ObjectGetPayload<S extends boolean | null | undefined | ObjectDefaultArgs> = $Result.GetResult<Prisma.$ObjectPayload, S>

  type ObjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ObjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ObjectCountAggregateInputType | true
    }

  export interface ObjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Object'], meta: { name: 'Object' } }
    /**
     * Find zero or one Object that matches the filter.
     * @param {ObjectFindUniqueArgs} args - Arguments to find a Object
     * @example
     * // Get one Object
     * const object = await prisma.object.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ObjectFindUniqueArgs>(args: SelectSubset<T, ObjectFindUniqueArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Object that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ObjectFindUniqueOrThrowArgs} args - Arguments to find a Object
     * @example
     * // Get one Object
     * const object = await prisma.object.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ObjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ObjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Object that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectFindFirstArgs} args - Arguments to find a Object
     * @example
     * // Get one Object
     * const object = await prisma.object.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ObjectFindFirstArgs>(args?: SelectSubset<T, ObjectFindFirstArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Object that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectFindFirstOrThrowArgs} args - Arguments to find a Object
     * @example
     * // Get one Object
     * const object = await prisma.object.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ObjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ObjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Objects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Objects
     * const objects = await prisma.object.findMany()
     * 
     * // Get first 10 Objects
     * const objects = await prisma.object.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const objectWithIdOnly = await prisma.object.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ObjectFindManyArgs>(args?: SelectSubset<T, ObjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Object.
     * @param {ObjectCreateArgs} args - Arguments to create a Object.
     * @example
     * // Create one Object
     * const Object = await prisma.object.create({
     *   data: {
     *     // ... data to create a Object
     *   }
     * })
     * 
     */
    create<T extends ObjectCreateArgs>(args: SelectSubset<T, ObjectCreateArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Objects.
     * @param {ObjectCreateManyArgs} args - Arguments to create many Objects.
     * @example
     * // Create many Objects
     * const object = await prisma.object.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ObjectCreateManyArgs>(args?: SelectSubset<T, ObjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Objects and returns the data saved in the database.
     * @param {ObjectCreateManyAndReturnArgs} args - Arguments to create many Objects.
     * @example
     * // Create many Objects
     * const object = await prisma.object.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Objects and only return the `id`
     * const objectWithIdOnly = await prisma.object.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ObjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ObjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Object.
     * @param {ObjectDeleteArgs} args - Arguments to delete one Object.
     * @example
     * // Delete one Object
     * const Object = await prisma.object.delete({
     *   where: {
     *     // ... filter to delete one Object
     *   }
     * })
     * 
     */
    delete<T extends ObjectDeleteArgs>(args: SelectSubset<T, ObjectDeleteArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Object.
     * @param {ObjectUpdateArgs} args - Arguments to update one Object.
     * @example
     * // Update one Object
     * const object = await prisma.object.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ObjectUpdateArgs>(args: SelectSubset<T, ObjectUpdateArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Objects.
     * @param {ObjectDeleteManyArgs} args - Arguments to filter Objects to delete.
     * @example
     * // Delete a few Objects
     * const { count } = await prisma.object.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ObjectDeleteManyArgs>(args?: SelectSubset<T, ObjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Objects
     * const object = await prisma.object.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ObjectUpdateManyArgs>(args: SelectSubset<T, ObjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Object.
     * @param {ObjectUpsertArgs} args - Arguments to update or create a Object.
     * @example
     * // Update or create a Object
     * const object = await prisma.object.upsert({
     *   create: {
     *     // ... data to create a Object
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Object we want to update
     *   }
     * })
     */
    upsert<T extends ObjectUpsertArgs>(args: SelectSubset<T, ObjectUpsertArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Objects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectCountArgs} args - Arguments to filter Objects to count.
     * @example
     * // Count the number of Objects
     * const count = await prisma.object.count({
     *   where: {
     *     // ... the filter for the Objects we want to count
     *   }
     * })
    **/
    count<T extends ObjectCountArgs>(
      args?: Subset<T, ObjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ObjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Object.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ObjectAggregateArgs>(args: Subset<T, ObjectAggregateArgs>): Prisma.PrismaPromise<GetObjectAggregateType<T>>

    /**
     * Group by Object.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ObjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ObjectGroupByArgs['orderBy'] }
        : { orderBy?: ObjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ObjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Object model
   */
  readonly fields: ObjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Object.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ObjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    objectRanges<T extends Object$objectRangesArgs<ExtArgs> = {}>(args?: Subset<T, Object$objectRangesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Object model
   */ 
  interface ObjectFieldRefs {
    readonly id: FieldRef<"Object", 'Int'>
    readonly lat: FieldRef<"Object", 'Float'>
    readonly long: FieldRef<"Object", 'Float'>
    readonly type: FieldRef<"Object", 'String'>
    readonly launched: FieldRef<"Object", 'Boolean'>
    readonly inFlight: FieldRef<"Object", 'Boolean'>
    readonly ownerId: FieldRef<"Object", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Object findUnique
   */
  export type ObjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * Filter, which Object to fetch.
     */
    where: ObjectWhereUniqueInput
  }

  /**
   * Object findUniqueOrThrow
   */
  export type ObjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * Filter, which Object to fetch.
     */
    where: ObjectWhereUniqueInput
  }

  /**
   * Object findFirst
   */
  export type ObjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * Filter, which Object to fetch.
     */
    where?: ObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objects to fetch.
     */
    orderBy?: ObjectOrderByWithRelationInput | ObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Objects.
     */
    cursor?: ObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Objects.
     */
    distinct?: ObjectScalarFieldEnum | ObjectScalarFieldEnum[]
  }

  /**
   * Object findFirstOrThrow
   */
  export type ObjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * Filter, which Object to fetch.
     */
    where?: ObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objects to fetch.
     */
    orderBy?: ObjectOrderByWithRelationInput | ObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Objects.
     */
    cursor?: ObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Objects.
     */
    distinct?: ObjectScalarFieldEnum | ObjectScalarFieldEnum[]
  }

  /**
   * Object findMany
   */
  export type ObjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * Filter, which Objects to fetch.
     */
    where?: ObjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Objects to fetch.
     */
    orderBy?: ObjectOrderByWithRelationInput | ObjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Objects.
     */
    cursor?: ObjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Objects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Objects.
     */
    skip?: number
    distinct?: ObjectScalarFieldEnum | ObjectScalarFieldEnum[]
  }

  /**
   * Object create
   */
  export type ObjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Object.
     */
    data: XOR<ObjectCreateInput, ObjectUncheckedCreateInput>
  }

  /**
   * Object createMany
   */
  export type ObjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Objects.
     */
    data: ObjectCreateManyInput | ObjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Object createManyAndReturn
   */
  export type ObjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Objects.
     */
    data: ObjectCreateManyInput | ObjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Object update
   */
  export type ObjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Object.
     */
    data: XOR<ObjectUpdateInput, ObjectUncheckedUpdateInput>
    /**
     * Choose, which Object to update.
     */
    where: ObjectWhereUniqueInput
  }

  /**
   * Object updateMany
   */
  export type ObjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Objects.
     */
    data: XOR<ObjectUpdateManyMutationInput, ObjectUncheckedUpdateManyInput>
    /**
     * Filter which Objects to update
     */
    where?: ObjectWhereInput
  }

  /**
   * Object upsert
   */
  export type ObjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Object to update in case it exists.
     */
    where: ObjectWhereUniqueInput
    /**
     * In case the Object found by the `where` argument doesn't exist, create a new Object with this data.
     */
    create: XOR<ObjectCreateInput, ObjectUncheckedCreateInput>
    /**
     * In case the Object was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ObjectUpdateInput, ObjectUncheckedUpdateInput>
  }

  /**
   * Object delete
   */
  export type ObjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
    /**
     * Filter which Object to delete.
     */
    where: ObjectWhereUniqueInput
  }

  /**
   * Object deleteMany
   */
  export type ObjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Objects to delete
     */
    where?: ObjectWhereInput
  }

  /**
   * Object.objectRanges
   */
  export type Object$objectRangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    where?: ObjectRangeWhereInput
    orderBy?: ObjectRangeOrderByWithRelationInput | ObjectRangeOrderByWithRelationInput[]
    cursor?: ObjectRangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ObjectRangeScalarFieldEnum | ObjectRangeScalarFieldEnum[]
  }

  /**
   * Object without action
   */
  export type ObjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Object
     */
    select?: ObjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectInclude<ExtArgs> | null
  }


  /**
   * Model ObjectRange
   */

  export type AggregateObjectRange = {
    _count: ObjectRangeCountAggregateOutputType | null
    _avg: ObjectRangeAvgAggregateOutputType | null
    _sum: ObjectRangeSumAggregateOutputType | null
    _min: ObjectRangeMinAggregateOutputType | null
    _max: ObjectRangeMaxAggregateOutputType | null
  }

  export type ObjectRangeAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    objectId: number | null
  }

  export type ObjectRangeSumAggregateOutputType = {
    id: number | null
    userId: number | null
    objectId: number | null
  }

  export type ObjectRangeMinAggregateOutputType = {
    id: number | null
    userId: number | null
    objectId: number | null
    inRange: boolean | null
  }

  export type ObjectRangeMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    objectId: number | null
    inRange: boolean | null
  }

  export type ObjectRangeCountAggregateOutputType = {
    id: number
    userId: number
    objectId: number
    inRange: number
    _all: number
  }


  export type ObjectRangeAvgAggregateInputType = {
    id?: true
    userId?: true
    objectId?: true
  }

  export type ObjectRangeSumAggregateInputType = {
    id?: true
    userId?: true
    objectId?: true
  }

  export type ObjectRangeMinAggregateInputType = {
    id?: true
    userId?: true
    objectId?: true
    inRange?: true
  }

  export type ObjectRangeMaxAggregateInputType = {
    id?: true
    userId?: true
    objectId?: true
    inRange?: true
  }

  export type ObjectRangeCountAggregateInputType = {
    id?: true
    userId?: true
    objectId?: true
    inRange?: true
    _all?: true
  }

  export type ObjectRangeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ObjectRange to aggregate.
     */
    where?: ObjectRangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ObjectRanges to fetch.
     */
    orderBy?: ObjectRangeOrderByWithRelationInput | ObjectRangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ObjectRangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ObjectRanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ObjectRanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ObjectRanges
    **/
    _count?: true | ObjectRangeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ObjectRangeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ObjectRangeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ObjectRangeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ObjectRangeMaxAggregateInputType
  }

  export type GetObjectRangeAggregateType<T extends ObjectRangeAggregateArgs> = {
        [P in keyof T & keyof AggregateObjectRange]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateObjectRange[P]>
      : GetScalarType<T[P], AggregateObjectRange[P]>
  }




  export type ObjectRangeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ObjectRangeWhereInput
    orderBy?: ObjectRangeOrderByWithAggregationInput | ObjectRangeOrderByWithAggregationInput[]
    by: ObjectRangeScalarFieldEnum[] | ObjectRangeScalarFieldEnum
    having?: ObjectRangeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ObjectRangeCountAggregateInputType | true
    _avg?: ObjectRangeAvgAggregateInputType
    _sum?: ObjectRangeSumAggregateInputType
    _min?: ObjectRangeMinAggregateInputType
    _max?: ObjectRangeMaxAggregateInputType
  }

  export type ObjectRangeGroupByOutputType = {
    id: number
    userId: number
    objectId: number
    inRange: boolean
    _count: ObjectRangeCountAggregateOutputType | null
    _avg: ObjectRangeAvgAggregateOutputType | null
    _sum: ObjectRangeSumAggregateOutputType | null
    _min: ObjectRangeMinAggregateOutputType | null
    _max: ObjectRangeMaxAggregateOutputType | null
  }

  type GetObjectRangeGroupByPayload<T extends ObjectRangeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ObjectRangeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ObjectRangeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ObjectRangeGroupByOutputType[P]>
            : GetScalarType<T[P], ObjectRangeGroupByOutputType[P]>
        }
      >
    >


  export type ObjectRangeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    objectId?: boolean
    inRange?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    object?: boolean | ObjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["objectRange"]>

  export type ObjectRangeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    objectId?: boolean
    inRange?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    object?: boolean | ObjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["objectRange"]>

  export type ObjectRangeSelectScalar = {
    id?: boolean
    userId?: boolean
    objectId?: boolean
    inRange?: boolean
  }

  export type ObjectRangeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    object?: boolean | ObjectDefaultArgs<ExtArgs>
  }
  export type ObjectRangeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    object?: boolean | ObjectDefaultArgs<ExtArgs>
  }

  export type $ObjectRangePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ObjectRange"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      object: Prisma.$ObjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      objectId: number
      inRange: boolean
    }, ExtArgs["result"]["objectRange"]>
    composites: {}
  }

  type ObjectRangeGetPayload<S extends boolean | null | undefined | ObjectRangeDefaultArgs> = $Result.GetResult<Prisma.$ObjectRangePayload, S>

  type ObjectRangeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ObjectRangeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ObjectRangeCountAggregateInputType | true
    }

  export interface ObjectRangeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ObjectRange'], meta: { name: 'ObjectRange' } }
    /**
     * Find zero or one ObjectRange that matches the filter.
     * @param {ObjectRangeFindUniqueArgs} args - Arguments to find a ObjectRange
     * @example
     * // Get one ObjectRange
     * const objectRange = await prisma.objectRange.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ObjectRangeFindUniqueArgs>(args: SelectSubset<T, ObjectRangeFindUniqueArgs<ExtArgs>>): Prisma__ObjectRangeClient<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ObjectRange that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ObjectRangeFindUniqueOrThrowArgs} args - Arguments to find a ObjectRange
     * @example
     * // Get one ObjectRange
     * const objectRange = await prisma.objectRange.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ObjectRangeFindUniqueOrThrowArgs>(args: SelectSubset<T, ObjectRangeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ObjectRangeClient<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ObjectRange that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectRangeFindFirstArgs} args - Arguments to find a ObjectRange
     * @example
     * // Get one ObjectRange
     * const objectRange = await prisma.objectRange.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ObjectRangeFindFirstArgs>(args?: SelectSubset<T, ObjectRangeFindFirstArgs<ExtArgs>>): Prisma__ObjectRangeClient<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ObjectRange that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectRangeFindFirstOrThrowArgs} args - Arguments to find a ObjectRange
     * @example
     * // Get one ObjectRange
     * const objectRange = await prisma.objectRange.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ObjectRangeFindFirstOrThrowArgs>(args?: SelectSubset<T, ObjectRangeFindFirstOrThrowArgs<ExtArgs>>): Prisma__ObjectRangeClient<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ObjectRanges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectRangeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ObjectRanges
     * const objectRanges = await prisma.objectRange.findMany()
     * 
     * // Get first 10 ObjectRanges
     * const objectRanges = await prisma.objectRange.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const objectRangeWithIdOnly = await prisma.objectRange.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ObjectRangeFindManyArgs>(args?: SelectSubset<T, ObjectRangeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ObjectRange.
     * @param {ObjectRangeCreateArgs} args - Arguments to create a ObjectRange.
     * @example
     * // Create one ObjectRange
     * const ObjectRange = await prisma.objectRange.create({
     *   data: {
     *     // ... data to create a ObjectRange
     *   }
     * })
     * 
     */
    create<T extends ObjectRangeCreateArgs>(args: SelectSubset<T, ObjectRangeCreateArgs<ExtArgs>>): Prisma__ObjectRangeClient<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ObjectRanges.
     * @param {ObjectRangeCreateManyArgs} args - Arguments to create many ObjectRanges.
     * @example
     * // Create many ObjectRanges
     * const objectRange = await prisma.objectRange.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ObjectRangeCreateManyArgs>(args?: SelectSubset<T, ObjectRangeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ObjectRanges and returns the data saved in the database.
     * @param {ObjectRangeCreateManyAndReturnArgs} args - Arguments to create many ObjectRanges.
     * @example
     * // Create many ObjectRanges
     * const objectRange = await prisma.objectRange.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ObjectRanges and only return the `id`
     * const objectRangeWithIdOnly = await prisma.objectRange.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ObjectRangeCreateManyAndReturnArgs>(args?: SelectSubset<T, ObjectRangeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ObjectRange.
     * @param {ObjectRangeDeleteArgs} args - Arguments to delete one ObjectRange.
     * @example
     * // Delete one ObjectRange
     * const ObjectRange = await prisma.objectRange.delete({
     *   where: {
     *     // ... filter to delete one ObjectRange
     *   }
     * })
     * 
     */
    delete<T extends ObjectRangeDeleteArgs>(args: SelectSubset<T, ObjectRangeDeleteArgs<ExtArgs>>): Prisma__ObjectRangeClient<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ObjectRange.
     * @param {ObjectRangeUpdateArgs} args - Arguments to update one ObjectRange.
     * @example
     * // Update one ObjectRange
     * const objectRange = await prisma.objectRange.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ObjectRangeUpdateArgs>(args: SelectSubset<T, ObjectRangeUpdateArgs<ExtArgs>>): Prisma__ObjectRangeClient<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ObjectRanges.
     * @param {ObjectRangeDeleteManyArgs} args - Arguments to filter ObjectRanges to delete.
     * @example
     * // Delete a few ObjectRanges
     * const { count } = await prisma.objectRange.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ObjectRangeDeleteManyArgs>(args?: SelectSubset<T, ObjectRangeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ObjectRanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectRangeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ObjectRanges
     * const objectRange = await prisma.objectRange.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ObjectRangeUpdateManyArgs>(args: SelectSubset<T, ObjectRangeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ObjectRange.
     * @param {ObjectRangeUpsertArgs} args - Arguments to update or create a ObjectRange.
     * @example
     * // Update or create a ObjectRange
     * const objectRange = await prisma.objectRange.upsert({
     *   create: {
     *     // ... data to create a ObjectRange
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ObjectRange we want to update
     *   }
     * })
     */
    upsert<T extends ObjectRangeUpsertArgs>(args: SelectSubset<T, ObjectRangeUpsertArgs<ExtArgs>>): Prisma__ObjectRangeClient<$Result.GetResult<Prisma.$ObjectRangePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ObjectRanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectRangeCountArgs} args - Arguments to filter ObjectRanges to count.
     * @example
     * // Count the number of ObjectRanges
     * const count = await prisma.objectRange.count({
     *   where: {
     *     // ... the filter for the ObjectRanges we want to count
     *   }
     * })
    **/
    count<T extends ObjectRangeCountArgs>(
      args?: Subset<T, ObjectRangeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ObjectRangeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ObjectRange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectRangeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ObjectRangeAggregateArgs>(args: Subset<T, ObjectRangeAggregateArgs>): Prisma.PrismaPromise<GetObjectRangeAggregateType<T>>

    /**
     * Group by ObjectRange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ObjectRangeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ObjectRangeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ObjectRangeGroupByArgs['orderBy'] }
        : { orderBy?: ObjectRangeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ObjectRangeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetObjectRangeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ObjectRange model
   */
  readonly fields: ObjectRangeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ObjectRange.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ObjectRangeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    object<T extends ObjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ObjectDefaultArgs<ExtArgs>>): Prisma__ObjectClient<$Result.GetResult<Prisma.$ObjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ObjectRange model
   */ 
  interface ObjectRangeFieldRefs {
    readonly id: FieldRef<"ObjectRange", 'Int'>
    readonly userId: FieldRef<"ObjectRange", 'Int'>
    readonly objectId: FieldRef<"ObjectRange", 'Int'>
    readonly inRange: FieldRef<"ObjectRange", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * ObjectRange findUnique
   */
  export type ObjectRangeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * Filter, which ObjectRange to fetch.
     */
    where: ObjectRangeWhereUniqueInput
  }

  /**
   * ObjectRange findUniqueOrThrow
   */
  export type ObjectRangeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * Filter, which ObjectRange to fetch.
     */
    where: ObjectRangeWhereUniqueInput
  }

  /**
   * ObjectRange findFirst
   */
  export type ObjectRangeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * Filter, which ObjectRange to fetch.
     */
    where?: ObjectRangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ObjectRanges to fetch.
     */
    orderBy?: ObjectRangeOrderByWithRelationInput | ObjectRangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ObjectRanges.
     */
    cursor?: ObjectRangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ObjectRanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ObjectRanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ObjectRanges.
     */
    distinct?: ObjectRangeScalarFieldEnum | ObjectRangeScalarFieldEnum[]
  }

  /**
   * ObjectRange findFirstOrThrow
   */
  export type ObjectRangeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * Filter, which ObjectRange to fetch.
     */
    where?: ObjectRangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ObjectRanges to fetch.
     */
    orderBy?: ObjectRangeOrderByWithRelationInput | ObjectRangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ObjectRanges.
     */
    cursor?: ObjectRangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ObjectRanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ObjectRanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ObjectRanges.
     */
    distinct?: ObjectRangeScalarFieldEnum | ObjectRangeScalarFieldEnum[]
  }

  /**
   * ObjectRange findMany
   */
  export type ObjectRangeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * Filter, which ObjectRanges to fetch.
     */
    where?: ObjectRangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ObjectRanges to fetch.
     */
    orderBy?: ObjectRangeOrderByWithRelationInput | ObjectRangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ObjectRanges.
     */
    cursor?: ObjectRangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ObjectRanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ObjectRanges.
     */
    skip?: number
    distinct?: ObjectRangeScalarFieldEnum | ObjectRangeScalarFieldEnum[]
  }

  /**
   * ObjectRange create
   */
  export type ObjectRangeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * The data needed to create a ObjectRange.
     */
    data: XOR<ObjectRangeCreateInput, ObjectRangeUncheckedCreateInput>
  }

  /**
   * ObjectRange createMany
   */
  export type ObjectRangeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ObjectRanges.
     */
    data: ObjectRangeCreateManyInput | ObjectRangeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ObjectRange createManyAndReturn
   */
  export type ObjectRangeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ObjectRanges.
     */
    data: ObjectRangeCreateManyInput | ObjectRangeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ObjectRange update
   */
  export type ObjectRangeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * The data needed to update a ObjectRange.
     */
    data: XOR<ObjectRangeUpdateInput, ObjectRangeUncheckedUpdateInput>
    /**
     * Choose, which ObjectRange to update.
     */
    where: ObjectRangeWhereUniqueInput
  }

  /**
   * ObjectRange updateMany
   */
  export type ObjectRangeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ObjectRanges.
     */
    data: XOR<ObjectRangeUpdateManyMutationInput, ObjectRangeUncheckedUpdateManyInput>
    /**
     * Filter which ObjectRanges to update
     */
    where?: ObjectRangeWhereInput
  }

  /**
   * ObjectRange upsert
   */
  export type ObjectRangeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * The filter to search for the ObjectRange to update in case it exists.
     */
    where: ObjectRangeWhereUniqueInput
    /**
     * In case the ObjectRange found by the `where` argument doesn't exist, create a new ObjectRange with this data.
     */
    create: XOR<ObjectRangeCreateInput, ObjectRangeUncheckedCreateInput>
    /**
     * In case the ObjectRange was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ObjectRangeUpdateInput, ObjectRangeUncheckedUpdateInput>
  }

  /**
   * ObjectRange delete
   */
  export type ObjectRangeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
    /**
     * Filter which ObjectRange to delete.
     */
    where: ObjectRangeWhereUniqueInput
  }

  /**
   * ObjectRange deleteMany
   */
  export type ObjectRangeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ObjectRanges to delete
     */
    where?: ObjectRangeWhereInput
  }

  /**
   * ObjectRange without action
   */
  export type ObjectRangeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ObjectRange
     */
    select?: ObjectRangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ObjectRangeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    device_identifier: 'device_identifier',
    device_token: 'device_token',
    name: 'name',
    health: 'health'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ObjectScalarFieldEnum: {
    id: 'id',
    lat: 'lat',
    long: 'long',
    type: 'type',
    launched: 'launched',
    inFlight: 'inFlight',
    ownerId: 'ownerId'
  };

  export type ObjectScalarFieldEnum = (typeof ObjectScalarFieldEnum)[keyof typeof ObjectScalarFieldEnum]


  export const ObjectRangeScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    objectId: 'objectId',
    inRange: 'inRange'
  };

  export type ObjectRangeScalarFieldEnum = (typeof ObjectRangeScalarFieldEnum)[keyof typeof ObjectRangeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    device_identifier?: StringFilter<"User"> | string
    device_token?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    health?: IntFilter<"User"> | number
    ownedObjects?: ObjectListRelationFilter
    objectRanges?: ObjectRangeListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    device_identifier?: SortOrder
    device_token?: SortOrder
    name?: SortOrderInput | SortOrder
    health?: SortOrder
    ownedObjects?: ObjectOrderByRelationAggregateInput
    objectRanges?: ObjectRangeOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    device_identifier?: string
    device_token?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    health?: IntFilter<"User"> | number
    ownedObjects?: ObjectListRelationFilter
    objectRanges?: ObjectRangeListRelationFilter
  }, "id" | "device_identifier" | "device_token">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    device_identifier?: SortOrder
    device_token?: SortOrder
    name?: SortOrderInput | SortOrder
    health?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    device_identifier?: StringWithAggregatesFilter<"User"> | string
    device_token?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    health?: IntWithAggregatesFilter<"User"> | number
  }

  export type ObjectWhereInput = {
    AND?: ObjectWhereInput | ObjectWhereInput[]
    OR?: ObjectWhereInput[]
    NOT?: ObjectWhereInput | ObjectWhereInput[]
    id?: IntFilter<"Object"> | number
    lat?: FloatFilter<"Object"> | number
    long?: FloatFilter<"Object"> | number
    type?: StringFilter<"Object"> | string
    launched?: BoolFilter<"Object"> | boolean
    inFlight?: BoolFilter<"Object"> | boolean
    ownerId?: IntFilter<"Object"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    objectRanges?: ObjectRangeListRelationFilter
  }

  export type ObjectOrderByWithRelationInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    type?: SortOrder
    launched?: SortOrder
    inFlight?: SortOrder
    ownerId?: SortOrder
    owner?: UserOrderByWithRelationInput
    objectRanges?: ObjectRangeOrderByRelationAggregateInput
  }

  export type ObjectWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ObjectWhereInput | ObjectWhereInput[]
    OR?: ObjectWhereInput[]
    NOT?: ObjectWhereInput | ObjectWhereInput[]
    lat?: FloatFilter<"Object"> | number
    long?: FloatFilter<"Object"> | number
    type?: StringFilter<"Object"> | string
    launched?: BoolFilter<"Object"> | boolean
    inFlight?: BoolFilter<"Object"> | boolean
    ownerId?: IntFilter<"Object"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    objectRanges?: ObjectRangeListRelationFilter
  }, "id">

  export type ObjectOrderByWithAggregationInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    type?: SortOrder
    launched?: SortOrder
    inFlight?: SortOrder
    ownerId?: SortOrder
    _count?: ObjectCountOrderByAggregateInput
    _avg?: ObjectAvgOrderByAggregateInput
    _max?: ObjectMaxOrderByAggregateInput
    _min?: ObjectMinOrderByAggregateInput
    _sum?: ObjectSumOrderByAggregateInput
  }

  export type ObjectScalarWhereWithAggregatesInput = {
    AND?: ObjectScalarWhereWithAggregatesInput | ObjectScalarWhereWithAggregatesInput[]
    OR?: ObjectScalarWhereWithAggregatesInput[]
    NOT?: ObjectScalarWhereWithAggregatesInput | ObjectScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Object"> | number
    lat?: FloatWithAggregatesFilter<"Object"> | number
    long?: FloatWithAggregatesFilter<"Object"> | number
    type?: StringWithAggregatesFilter<"Object"> | string
    launched?: BoolWithAggregatesFilter<"Object"> | boolean
    inFlight?: BoolWithAggregatesFilter<"Object"> | boolean
    ownerId?: IntWithAggregatesFilter<"Object"> | number
  }

  export type ObjectRangeWhereInput = {
    AND?: ObjectRangeWhereInput | ObjectRangeWhereInput[]
    OR?: ObjectRangeWhereInput[]
    NOT?: ObjectRangeWhereInput | ObjectRangeWhereInput[]
    id?: IntFilter<"ObjectRange"> | number
    userId?: IntFilter<"ObjectRange"> | number
    objectId?: IntFilter<"ObjectRange"> | number
    inRange?: BoolFilter<"ObjectRange"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    object?: XOR<ObjectRelationFilter, ObjectWhereInput>
  }

  export type ObjectRangeOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    objectId?: SortOrder
    inRange?: SortOrder
    user?: UserOrderByWithRelationInput
    object?: ObjectOrderByWithRelationInput
  }

  export type ObjectRangeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_objectId?: ObjectRangeUserIdObjectIdCompoundUniqueInput
    AND?: ObjectRangeWhereInput | ObjectRangeWhereInput[]
    OR?: ObjectRangeWhereInput[]
    NOT?: ObjectRangeWhereInput | ObjectRangeWhereInput[]
    userId?: IntFilter<"ObjectRange"> | number
    objectId?: IntFilter<"ObjectRange"> | number
    inRange?: BoolFilter<"ObjectRange"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    object?: XOR<ObjectRelationFilter, ObjectWhereInput>
  }, "id" | "userId_objectId">

  export type ObjectRangeOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    objectId?: SortOrder
    inRange?: SortOrder
    _count?: ObjectRangeCountOrderByAggregateInput
    _avg?: ObjectRangeAvgOrderByAggregateInput
    _max?: ObjectRangeMaxOrderByAggregateInput
    _min?: ObjectRangeMinOrderByAggregateInput
    _sum?: ObjectRangeSumOrderByAggregateInput
  }

  export type ObjectRangeScalarWhereWithAggregatesInput = {
    AND?: ObjectRangeScalarWhereWithAggregatesInput | ObjectRangeScalarWhereWithAggregatesInput[]
    OR?: ObjectRangeScalarWhereWithAggregatesInput[]
    NOT?: ObjectRangeScalarWhereWithAggregatesInput | ObjectRangeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ObjectRange"> | number
    userId?: IntWithAggregatesFilter<"ObjectRange"> | number
    objectId?: IntWithAggregatesFilter<"ObjectRange"> | number
    inRange?: BoolWithAggregatesFilter<"ObjectRange"> | boolean
  }

  export type UserCreateInput = {
    device_identifier: string
    device_token: string
    name?: string | null
    health?: number
    ownedObjects?: ObjectCreateNestedManyWithoutOwnerInput
    objectRanges?: ObjectRangeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    device_identifier: string
    device_token: string
    name?: string | null
    health?: number
    ownedObjects?: ObjectUncheckedCreateNestedManyWithoutOwnerInput
    objectRanges?: ObjectRangeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    device_identifier?: StringFieldUpdateOperationsInput | string
    device_token?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    health?: IntFieldUpdateOperationsInput | number
    ownedObjects?: ObjectUpdateManyWithoutOwnerNestedInput
    objectRanges?: ObjectRangeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    device_identifier?: StringFieldUpdateOperationsInput | string
    device_token?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    health?: IntFieldUpdateOperationsInput | number
    ownedObjects?: ObjectUncheckedUpdateManyWithoutOwnerNestedInput
    objectRanges?: ObjectRangeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    device_identifier: string
    device_token: string
    name?: string | null
    health?: number
  }

  export type UserUpdateManyMutationInput = {
    device_identifier?: StringFieldUpdateOperationsInput | string
    device_token?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    health?: IntFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    device_identifier?: StringFieldUpdateOperationsInput | string
    device_token?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    health?: IntFieldUpdateOperationsInput | number
  }

  export type ObjectCreateInput = {
    lat: number
    long: number
    type: string
    launched?: boolean
    inFlight?: boolean
    owner: UserCreateNestedOneWithoutOwnedObjectsInput
    objectRanges?: ObjectRangeCreateNestedManyWithoutObjectInput
  }

  export type ObjectUncheckedCreateInput = {
    id?: number
    lat: number
    long: number
    type: string
    launched?: boolean
    inFlight?: boolean
    ownerId: number
    objectRanges?: ObjectRangeUncheckedCreateNestedManyWithoutObjectInput
  }

  export type ObjectUpdateInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutOwnedObjectsNestedInput
    objectRanges?: ObjectRangeUpdateManyWithoutObjectNestedInput
  }

  export type ObjectUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
    objectRanges?: ObjectRangeUncheckedUpdateManyWithoutObjectNestedInput
  }

  export type ObjectCreateManyInput = {
    id?: number
    lat: number
    long: number
    type: string
    launched?: boolean
    inFlight?: boolean
    ownerId: number
  }

  export type ObjectUpdateManyMutationInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ObjectUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type ObjectRangeCreateInput = {
    inRange: boolean
    user: UserCreateNestedOneWithoutObjectRangesInput
    object: ObjectCreateNestedOneWithoutObjectRangesInput
  }

  export type ObjectRangeUncheckedCreateInput = {
    id?: number
    userId: number
    objectId: number
    inRange: boolean
  }

  export type ObjectRangeUpdateInput = {
    inRange?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutObjectRangesNestedInput
    object?: ObjectUpdateOneRequiredWithoutObjectRangesNestedInput
  }

  export type ObjectRangeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    objectId?: IntFieldUpdateOperationsInput | number
    inRange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ObjectRangeCreateManyInput = {
    id?: number
    userId: number
    objectId: number
    inRange: boolean
  }

  export type ObjectRangeUpdateManyMutationInput = {
    inRange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ObjectRangeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    objectId?: IntFieldUpdateOperationsInput | number
    inRange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ObjectListRelationFilter = {
    every?: ObjectWhereInput
    some?: ObjectWhereInput
    none?: ObjectWhereInput
  }

  export type ObjectRangeListRelationFilter = {
    every?: ObjectRangeWhereInput
    some?: ObjectRangeWhereInput
    none?: ObjectRangeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ObjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ObjectRangeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    device_identifier?: SortOrder
    device_token?: SortOrder
    name?: SortOrder
    health?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    health?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    device_identifier?: SortOrder
    device_token?: SortOrder
    name?: SortOrder
    health?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    device_identifier?: SortOrder
    device_token?: SortOrder
    name?: SortOrder
    health?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    health?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ObjectCountOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    type?: SortOrder
    launched?: SortOrder
    inFlight?: SortOrder
    ownerId?: SortOrder
  }

  export type ObjectAvgOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    ownerId?: SortOrder
  }

  export type ObjectMaxOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    type?: SortOrder
    launched?: SortOrder
    inFlight?: SortOrder
    ownerId?: SortOrder
  }

  export type ObjectMinOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    type?: SortOrder
    launched?: SortOrder
    inFlight?: SortOrder
    ownerId?: SortOrder
  }

  export type ObjectSumOrderByAggregateInput = {
    id?: SortOrder
    lat?: SortOrder
    long?: SortOrder
    ownerId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ObjectRelationFilter = {
    is?: ObjectWhereInput
    isNot?: ObjectWhereInput
  }

  export type ObjectRangeUserIdObjectIdCompoundUniqueInput = {
    userId: number
    objectId: number
  }

  export type ObjectRangeCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    objectId?: SortOrder
    inRange?: SortOrder
  }

  export type ObjectRangeAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    objectId?: SortOrder
  }

  export type ObjectRangeMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    objectId?: SortOrder
    inRange?: SortOrder
  }

  export type ObjectRangeMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    objectId?: SortOrder
    inRange?: SortOrder
  }

  export type ObjectRangeSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    objectId?: SortOrder
  }

  export type ObjectCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ObjectCreateWithoutOwnerInput, ObjectUncheckedCreateWithoutOwnerInput> | ObjectCreateWithoutOwnerInput[] | ObjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ObjectCreateOrConnectWithoutOwnerInput | ObjectCreateOrConnectWithoutOwnerInput[]
    createMany?: ObjectCreateManyOwnerInputEnvelope
    connect?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
  }

  export type ObjectRangeCreateNestedManyWithoutUserInput = {
    create?: XOR<ObjectRangeCreateWithoutUserInput, ObjectRangeUncheckedCreateWithoutUserInput> | ObjectRangeCreateWithoutUserInput[] | ObjectRangeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ObjectRangeCreateOrConnectWithoutUserInput | ObjectRangeCreateOrConnectWithoutUserInput[]
    createMany?: ObjectRangeCreateManyUserInputEnvelope
    connect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
  }

  export type ObjectUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ObjectCreateWithoutOwnerInput, ObjectUncheckedCreateWithoutOwnerInput> | ObjectCreateWithoutOwnerInput[] | ObjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ObjectCreateOrConnectWithoutOwnerInput | ObjectCreateOrConnectWithoutOwnerInput[]
    createMany?: ObjectCreateManyOwnerInputEnvelope
    connect?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
  }

  export type ObjectRangeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ObjectRangeCreateWithoutUserInput, ObjectRangeUncheckedCreateWithoutUserInput> | ObjectRangeCreateWithoutUserInput[] | ObjectRangeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ObjectRangeCreateOrConnectWithoutUserInput | ObjectRangeCreateOrConnectWithoutUserInput[]
    createMany?: ObjectRangeCreateManyUserInputEnvelope
    connect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ObjectUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ObjectCreateWithoutOwnerInput, ObjectUncheckedCreateWithoutOwnerInput> | ObjectCreateWithoutOwnerInput[] | ObjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ObjectCreateOrConnectWithoutOwnerInput | ObjectCreateOrConnectWithoutOwnerInput[]
    upsert?: ObjectUpsertWithWhereUniqueWithoutOwnerInput | ObjectUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ObjectCreateManyOwnerInputEnvelope
    set?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
    disconnect?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
    delete?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
    connect?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
    update?: ObjectUpdateWithWhereUniqueWithoutOwnerInput | ObjectUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ObjectUpdateManyWithWhereWithoutOwnerInput | ObjectUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ObjectScalarWhereInput | ObjectScalarWhereInput[]
  }

  export type ObjectRangeUpdateManyWithoutUserNestedInput = {
    create?: XOR<ObjectRangeCreateWithoutUserInput, ObjectRangeUncheckedCreateWithoutUserInput> | ObjectRangeCreateWithoutUserInput[] | ObjectRangeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ObjectRangeCreateOrConnectWithoutUserInput | ObjectRangeCreateOrConnectWithoutUserInput[]
    upsert?: ObjectRangeUpsertWithWhereUniqueWithoutUserInput | ObjectRangeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ObjectRangeCreateManyUserInputEnvelope
    set?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    disconnect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    delete?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    connect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    update?: ObjectRangeUpdateWithWhereUniqueWithoutUserInput | ObjectRangeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ObjectRangeUpdateManyWithWhereWithoutUserInput | ObjectRangeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ObjectRangeScalarWhereInput | ObjectRangeScalarWhereInput[]
  }

  export type ObjectUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ObjectCreateWithoutOwnerInput, ObjectUncheckedCreateWithoutOwnerInput> | ObjectCreateWithoutOwnerInput[] | ObjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ObjectCreateOrConnectWithoutOwnerInput | ObjectCreateOrConnectWithoutOwnerInput[]
    upsert?: ObjectUpsertWithWhereUniqueWithoutOwnerInput | ObjectUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ObjectCreateManyOwnerInputEnvelope
    set?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
    disconnect?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
    delete?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
    connect?: ObjectWhereUniqueInput | ObjectWhereUniqueInput[]
    update?: ObjectUpdateWithWhereUniqueWithoutOwnerInput | ObjectUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ObjectUpdateManyWithWhereWithoutOwnerInput | ObjectUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ObjectScalarWhereInput | ObjectScalarWhereInput[]
  }

  export type ObjectRangeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ObjectRangeCreateWithoutUserInput, ObjectRangeUncheckedCreateWithoutUserInput> | ObjectRangeCreateWithoutUserInput[] | ObjectRangeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ObjectRangeCreateOrConnectWithoutUserInput | ObjectRangeCreateOrConnectWithoutUserInput[]
    upsert?: ObjectRangeUpsertWithWhereUniqueWithoutUserInput | ObjectRangeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ObjectRangeCreateManyUserInputEnvelope
    set?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    disconnect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    delete?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    connect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    update?: ObjectRangeUpdateWithWhereUniqueWithoutUserInput | ObjectRangeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ObjectRangeUpdateManyWithWhereWithoutUserInput | ObjectRangeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ObjectRangeScalarWhereInput | ObjectRangeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOwnedObjectsInput = {
    create?: XOR<UserCreateWithoutOwnedObjectsInput, UserUncheckedCreateWithoutOwnedObjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedObjectsInput
    connect?: UserWhereUniqueInput
  }

  export type ObjectRangeCreateNestedManyWithoutObjectInput = {
    create?: XOR<ObjectRangeCreateWithoutObjectInput, ObjectRangeUncheckedCreateWithoutObjectInput> | ObjectRangeCreateWithoutObjectInput[] | ObjectRangeUncheckedCreateWithoutObjectInput[]
    connectOrCreate?: ObjectRangeCreateOrConnectWithoutObjectInput | ObjectRangeCreateOrConnectWithoutObjectInput[]
    createMany?: ObjectRangeCreateManyObjectInputEnvelope
    connect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
  }

  export type ObjectRangeUncheckedCreateNestedManyWithoutObjectInput = {
    create?: XOR<ObjectRangeCreateWithoutObjectInput, ObjectRangeUncheckedCreateWithoutObjectInput> | ObjectRangeCreateWithoutObjectInput[] | ObjectRangeUncheckedCreateWithoutObjectInput[]
    connectOrCreate?: ObjectRangeCreateOrConnectWithoutObjectInput | ObjectRangeCreateOrConnectWithoutObjectInput[]
    createMany?: ObjectRangeCreateManyObjectInputEnvelope
    connect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutOwnedObjectsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedObjectsInput, UserUncheckedCreateWithoutOwnedObjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedObjectsInput
    upsert?: UserUpsertWithoutOwnedObjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedObjectsInput, UserUpdateWithoutOwnedObjectsInput>, UserUncheckedUpdateWithoutOwnedObjectsInput>
  }

  export type ObjectRangeUpdateManyWithoutObjectNestedInput = {
    create?: XOR<ObjectRangeCreateWithoutObjectInput, ObjectRangeUncheckedCreateWithoutObjectInput> | ObjectRangeCreateWithoutObjectInput[] | ObjectRangeUncheckedCreateWithoutObjectInput[]
    connectOrCreate?: ObjectRangeCreateOrConnectWithoutObjectInput | ObjectRangeCreateOrConnectWithoutObjectInput[]
    upsert?: ObjectRangeUpsertWithWhereUniqueWithoutObjectInput | ObjectRangeUpsertWithWhereUniqueWithoutObjectInput[]
    createMany?: ObjectRangeCreateManyObjectInputEnvelope
    set?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    disconnect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    delete?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    connect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    update?: ObjectRangeUpdateWithWhereUniqueWithoutObjectInput | ObjectRangeUpdateWithWhereUniqueWithoutObjectInput[]
    updateMany?: ObjectRangeUpdateManyWithWhereWithoutObjectInput | ObjectRangeUpdateManyWithWhereWithoutObjectInput[]
    deleteMany?: ObjectRangeScalarWhereInput | ObjectRangeScalarWhereInput[]
  }

  export type ObjectRangeUncheckedUpdateManyWithoutObjectNestedInput = {
    create?: XOR<ObjectRangeCreateWithoutObjectInput, ObjectRangeUncheckedCreateWithoutObjectInput> | ObjectRangeCreateWithoutObjectInput[] | ObjectRangeUncheckedCreateWithoutObjectInput[]
    connectOrCreate?: ObjectRangeCreateOrConnectWithoutObjectInput | ObjectRangeCreateOrConnectWithoutObjectInput[]
    upsert?: ObjectRangeUpsertWithWhereUniqueWithoutObjectInput | ObjectRangeUpsertWithWhereUniqueWithoutObjectInput[]
    createMany?: ObjectRangeCreateManyObjectInputEnvelope
    set?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    disconnect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    delete?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    connect?: ObjectRangeWhereUniqueInput | ObjectRangeWhereUniqueInput[]
    update?: ObjectRangeUpdateWithWhereUniqueWithoutObjectInput | ObjectRangeUpdateWithWhereUniqueWithoutObjectInput[]
    updateMany?: ObjectRangeUpdateManyWithWhereWithoutObjectInput | ObjectRangeUpdateManyWithWhereWithoutObjectInput[]
    deleteMany?: ObjectRangeScalarWhereInput | ObjectRangeScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutObjectRangesInput = {
    create?: XOR<UserCreateWithoutObjectRangesInput, UserUncheckedCreateWithoutObjectRangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutObjectRangesInput
    connect?: UserWhereUniqueInput
  }

  export type ObjectCreateNestedOneWithoutObjectRangesInput = {
    create?: XOR<ObjectCreateWithoutObjectRangesInput, ObjectUncheckedCreateWithoutObjectRangesInput>
    connectOrCreate?: ObjectCreateOrConnectWithoutObjectRangesInput
    connect?: ObjectWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutObjectRangesNestedInput = {
    create?: XOR<UserCreateWithoutObjectRangesInput, UserUncheckedCreateWithoutObjectRangesInput>
    connectOrCreate?: UserCreateOrConnectWithoutObjectRangesInput
    upsert?: UserUpsertWithoutObjectRangesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutObjectRangesInput, UserUpdateWithoutObjectRangesInput>, UserUncheckedUpdateWithoutObjectRangesInput>
  }

  export type ObjectUpdateOneRequiredWithoutObjectRangesNestedInput = {
    create?: XOR<ObjectCreateWithoutObjectRangesInput, ObjectUncheckedCreateWithoutObjectRangesInput>
    connectOrCreate?: ObjectCreateOrConnectWithoutObjectRangesInput
    upsert?: ObjectUpsertWithoutObjectRangesInput
    connect?: ObjectWhereUniqueInput
    update?: XOR<XOR<ObjectUpdateToOneWithWhereWithoutObjectRangesInput, ObjectUpdateWithoutObjectRangesInput>, ObjectUncheckedUpdateWithoutObjectRangesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ObjectCreateWithoutOwnerInput = {
    lat: number
    long: number
    type: string
    launched?: boolean
    inFlight?: boolean
    objectRanges?: ObjectRangeCreateNestedManyWithoutObjectInput
  }

  export type ObjectUncheckedCreateWithoutOwnerInput = {
    id?: number
    lat: number
    long: number
    type: string
    launched?: boolean
    inFlight?: boolean
    objectRanges?: ObjectRangeUncheckedCreateNestedManyWithoutObjectInput
  }

  export type ObjectCreateOrConnectWithoutOwnerInput = {
    where: ObjectWhereUniqueInput
    create: XOR<ObjectCreateWithoutOwnerInput, ObjectUncheckedCreateWithoutOwnerInput>
  }

  export type ObjectCreateManyOwnerInputEnvelope = {
    data: ObjectCreateManyOwnerInput | ObjectCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ObjectRangeCreateWithoutUserInput = {
    inRange: boolean
    object: ObjectCreateNestedOneWithoutObjectRangesInput
  }

  export type ObjectRangeUncheckedCreateWithoutUserInput = {
    id?: number
    objectId: number
    inRange: boolean
  }

  export type ObjectRangeCreateOrConnectWithoutUserInput = {
    where: ObjectRangeWhereUniqueInput
    create: XOR<ObjectRangeCreateWithoutUserInput, ObjectRangeUncheckedCreateWithoutUserInput>
  }

  export type ObjectRangeCreateManyUserInputEnvelope = {
    data: ObjectRangeCreateManyUserInput | ObjectRangeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ObjectUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ObjectWhereUniqueInput
    update: XOR<ObjectUpdateWithoutOwnerInput, ObjectUncheckedUpdateWithoutOwnerInput>
    create: XOR<ObjectCreateWithoutOwnerInput, ObjectUncheckedCreateWithoutOwnerInput>
  }

  export type ObjectUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ObjectWhereUniqueInput
    data: XOR<ObjectUpdateWithoutOwnerInput, ObjectUncheckedUpdateWithoutOwnerInput>
  }

  export type ObjectUpdateManyWithWhereWithoutOwnerInput = {
    where: ObjectScalarWhereInput
    data: XOR<ObjectUpdateManyMutationInput, ObjectUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ObjectScalarWhereInput = {
    AND?: ObjectScalarWhereInput | ObjectScalarWhereInput[]
    OR?: ObjectScalarWhereInput[]
    NOT?: ObjectScalarWhereInput | ObjectScalarWhereInput[]
    id?: IntFilter<"Object"> | number
    lat?: FloatFilter<"Object"> | number
    long?: FloatFilter<"Object"> | number
    type?: StringFilter<"Object"> | string
    launched?: BoolFilter<"Object"> | boolean
    inFlight?: BoolFilter<"Object"> | boolean
    ownerId?: IntFilter<"Object"> | number
  }

  export type ObjectRangeUpsertWithWhereUniqueWithoutUserInput = {
    where: ObjectRangeWhereUniqueInput
    update: XOR<ObjectRangeUpdateWithoutUserInput, ObjectRangeUncheckedUpdateWithoutUserInput>
    create: XOR<ObjectRangeCreateWithoutUserInput, ObjectRangeUncheckedCreateWithoutUserInput>
  }

  export type ObjectRangeUpdateWithWhereUniqueWithoutUserInput = {
    where: ObjectRangeWhereUniqueInput
    data: XOR<ObjectRangeUpdateWithoutUserInput, ObjectRangeUncheckedUpdateWithoutUserInput>
  }

  export type ObjectRangeUpdateManyWithWhereWithoutUserInput = {
    where: ObjectRangeScalarWhereInput
    data: XOR<ObjectRangeUpdateManyMutationInput, ObjectRangeUncheckedUpdateManyWithoutUserInput>
  }

  export type ObjectRangeScalarWhereInput = {
    AND?: ObjectRangeScalarWhereInput | ObjectRangeScalarWhereInput[]
    OR?: ObjectRangeScalarWhereInput[]
    NOT?: ObjectRangeScalarWhereInput | ObjectRangeScalarWhereInput[]
    id?: IntFilter<"ObjectRange"> | number
    userId?: IntFilter<"ObjectRange"> | number
    objectId?: IntFilter<"ObjectRange"> | number
    inRange?: BoolFilter<"ObjectRange"> | boolean
  }

  export type UserCreateWithoutOwnedObjectsInput = {
    device_identifier: string
    device_token: string
    name?: string | null
    health?: number
    objectRanges?: ObjectRangeCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOwnedObjectsInput = {
    id?: number
    device_identifier: string
    device_token: string
    name?: string | null
    health?: number
    objectRanges?: ObjectRangeUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOwnedObjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedObjectsInput, UserUncheckedCreateWithoutOwnedObjectsInput>
  }

  export type ObjectRangeCreateWithoutObjectInput = {
    inRange: boolean
    user: UserCreateNestedOneWithoutObjectRangesInput
  }

  export type ObjectRangeUncheckedCreateWithoutObjectInput = {
    id?: number
    userId: number
    inRange: boolean
  }

  export type ObjectRangeCreateOrConnectWithoutObjectInput = {
    where: ObjectRangeWhereUniqueInput
    create: XOR<ObjectRangeCreateWithoutObjectInput, ObjectRangeUncheckedCreateWithoutObjectInput>
  }

  export type ObjectRangeCreateManyObjectInputEnvelope = {
    data: ObjectRangeCreateManyObjectInput | ObjectRangeCreateManyObjectInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutOwnedObjectsInput = {
    update: XOR<UserUpdateWithoutOwnedObjectsInput, UserUncheckedUpdateWithoutOwnedObjectsInput>
    create: XOR<UserCreateWithoutOwnedObjectsInput, UserUncheckedCreateWithoutOwnedObjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedObjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedObjectsInput, UserUncheckedUpdateWithoutOwnedObjectsInput>
  }

  export type UserUpdateWithoutOwnedObjectsInput = {
    device_identifier?: StringFieldUpdateOperationsInput | string
    device_token?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    health?: IntFieldUpdateOperationsInput | number
    objectRanges?: ObjectRangeUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedObjectsInput = {
    id?: IntFieldUpdateOperationsInput | number
    device_identifier?: StringFieldUpdateOperationsInput | string
    device_token?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    health?: IntFieldUpdateOperationsInput | number
    objectRanges?: ObjectRangeUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ObjectRangeUpsertWithWhereUniqueWithoutObjectInput = {
    where: ObjectRangeWhereUniqueInput
    update: XOR<ObjectRangeUpdateWithoutObjectInput, ObjectRangeUncheckedUpdateWithoutObjectInput>
    create: XOR<ObjectRangeCreateWithoutObjectInput, ObjectRangeUncheckedCreateWithoutObjectInput>
  }

  export type ObjectRangeUpdateWithWhereUniqueWithoutObjectInput = {
    where: ObjectRangeWhereUniqueInput
    data: XOR<ObjectRangeUpdateWithoutObjectInput, ObjectRangeUncheckedUpdateWithoutObjectInput>
  }

  export type ObjectRangeUpdateManyWithWhereWithoutObjectInput = {
    where: ObjectRangeScalarWhereInput
    data: XOR<ObjectRangeUpdateManyMutationInput, ObjectRangeUncheckedUpdateManyWithoutObjectInput>
  }

  export type UserCreateWithoutObjectRangesInput = {
    device_identifier: string
    device_token: string
    name?: string | null
    health?: number
    ownedObjects?: ObjectCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutObjectRangesInput = {
    id?: number
    device_identifier: string
    device_token: string
    name?: string | null
    health?: number
    ownedObjects?: ObjectUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutObjectRangesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutObjectRangesInput, UserUncheckedCreateWithoutObjectRangesInput>
  }

  export type ObjectCreateWithoutObjectRangesInput = {
    lat: number
    long: number
    type: string
    launched?: boolean
    inFlight?: boolean
    owner: UserCreateNestedOneWithoutOwnedObjectsInput
  }

  export type ObjectUncheckedCreateWithoutObjectRangesInput = {
    id?: number
    lat: number
    long: number
    type: string
    launched?: boolean
    inFlight?: boolean
    ownerId: number
  }

  export type ObjectCreateOrConnectWithoutObjectRangesInput = {
    where: ObjectWhereUniqueInput
    create: XOR<ObjectCreateWithoutObjectRangesInput, ObjectUncheckedCreateWithoutObjectRangesInput>
  }

  export type UserUpsertWithoutObjectRangesInput = {
    update: XOR<UserUpdateWithoutObjectRangesInput, UserUncheckedUpdateWithoutObjectRangesInput>
    create: XOR<UserCreateWithoutObjectRangesInput, UserUncheckedCreateWithoutObjectRangesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutObjectRangesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutObjectRangesInput, UserUncheckedUpdateWithoutObjectRangesInput>
  }

  export type UserUpdateWithoutObjectRangesInput = {
    device_identifier?: StringFieldUpdateOperationsInput | string
    device_token?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    health?: IntFieldUpdateOperationsInput | number
    ownedObjects?: ObjectUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutObjectRangesInput = {
    id?: IntFieldUpdateOperationsInput | number
    device_identifier?: StringFieldUpdateOperationsInput | string
    device_token?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    health?: IntFieldUpdateOperationsInput | number
    ownedObjects?: ObjectUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type ObjectUpsertWithoutObjectRangesInput = {
    update: XOR<ObjectUpdateWithoutObjectRangesInput, ObjectUncheckedUpdateWithoutObjectRangesInput>
    create: XOR<ObjectCreateWithoutObjectRangesInput, ObjectUncheckedCreateWithoutObjectRangesInput>
    where?: ObjectWhereInput
  }

  export type ObjectUpdateToOneWithWhereWithoutObjectRangesInput = {
    where?: ObjectWhereInput
    data: XOR<ObjectUpdateWithoutObjectRangesInput, ObjectUncheckedUpdateWithoutObjectRangesInput>
  }

  export type ObjectUpdateWithoutObjectRangesInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
    owner?: UserUpdateOneRequiredWithoutOwnedObjectsNestedInput
  }

  export type ObjectUncheckedUpdateWithoutObjectRangesInput = {
    id?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
    ownerId?: IntFieldUpdateOperationsInput | number
  }

  export type ObjectCreateManyOwnerInput = {
    id?: number
    lat: number
    long: number
    type: string
    launched?: boolean
    inFlight?: boolean
  }

  export type ObjectRangeCreateManyUserInput = {
    id?: number
    objectId: number
    inRange: boolean
  }

  export type ObjectUpdateWithoutOwnerInput = {
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
    objectRanges?: ObjectRangeUpdateManyWithoutObjectNestedInput
  }

  export type ObjectUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
    objectRanges?: ObjectRangeUncheckedUpdateManyWithoutObjectNestedInput
  }

  export type ObjectUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    lat?: FloatFieldUpdateOperationsInput | number
    long?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    launched?: BoolFieldUpdateOperationsInput | boolean
    inFlight?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ObjectRangeUpdateWithoutUserInput = {
    inRange?: BoolFieldUpdateOperationsInput | boolean
    object?: ObjectUpdateOneRequiredWithoutObjectRangesNestedInput
  }

  export type ObjectRangeUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectId?: IntFieldUpdateOperationsInput | number
    inRange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ObjectRangeUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    objectId?: IntFieldUpdateOperationsInput | number
    inRange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ObjectRangeCreateManyObjectInput = {
    id?: number
    userId: number
    inRange: boolean
  }

  export type ObjectRangeUpdateWithoutObjectInput = {
    inRange?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutObjectRangesNestedInput
  }

  export type ObjectRangeUncheckedUpdateWithoutObjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    inRange?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ObjectRangeUncheckedUpdateManyWithoutObjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    inRange?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ObjectCountOutputTypeDefaultArgs instead
     */
    export type ObjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ObjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ObjectDefaultArgs instead
     */
    export type ObjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ObjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ObjectRangeDefaultArgs instead
     */
    export type ObjectRangeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ObjectRangeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}